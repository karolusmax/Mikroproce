
lab07.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000051a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000051a  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000a0  008000a0  000005ee  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ac  00000000  00000000  0000060e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000489  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000019f  00000000  00000000  00000b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055c  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000154  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000172  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 21 02 	jmp	0x442	; 0x442 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 3a       	cpi	r26, 0xA5	; 165
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 45 02 	call	0x48a	; 0x48a <main>
  8a:	0c 94 8b 02 	jmp	0x516	; 0x516 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wypisz>:

volatile posX,posY;
volatile uint8_t stan=0;

void wypisz(uint8_t b,int command_mode)
{
  92:	28 2f       	mov	r18, r24
	uint8_t temp = LCD_PORT;
  94:	88 b3       	in	r24, 0x18	; 24
	if(command_mode){
  96:	67 2b       	or	r22, r23
  98:	11 f0       	breq	.+4      	; 0x9e <wypisz+0xc>
		LCD_PORT &= ~(_BV(LCD_RS)); //przestawia na lini RS wartosc na 0 po to by wyslac komende a nie dane
  9a:	c1 98       	cbi	0x18, 1	; 24
  9c:	01 c0       	rjmp	.+2      	; 0xa0 <wypisz+0xe>
	} else {
		LCD_PORT |= _BV(LCD_RS);//przestawia linie RS na wartosc 1 odpowiadajaca wprowadzaniu danych
  9e:	c1 9a       	sbi	0x18, 1	; 24
	}
    LCD_PORT |= _BV(LCD_EN);    //wlaczenie linii ENABLE
  a0:	c0 9a       	sbi	0x18, 0	; 24
    LCD_PORT = (b & 0xF0) | (LCD_PORT & 0x0F);  //wyslanie 4 starszych bitow
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	92 2f       	mov	r25, r18
  a6:	90 7f       	andi	r25, 0xF0	; 240
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	98 2b       	or	r25, r24
  ac:	98 bb       	out	0x18, r25	; 24
    LCD_PORT &= ~(_BV(LCD_EN)); //potwierdzenie wyslania danych poprzez opadniecie ENABLE
  ae:	c0 98       	cbi	0x18, 0	; 24
    asm volatile("nop");    //oczekiwanie jednego cyklu
  b0:	00 00       	nop
    LCD_PORT |= _BV(LCD_EN);
  b2:	c0 9a       	sbi	0x18, 0	; 24
    LCD_PORT = ((b & 0x0F) << 4) | (LCD_PORT & 0x0F);   //wyslanie 4 mlodszych bitow
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	22 95       	swap	r18
  b8:	20 7f       	andi	r18, 0xF0	; 240
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	82 2b       	or	r24, r18
  be:	88 bb       	out	0x18, r24	; 24
    LCD_PORT &= ~(_BV(LCD_EN));
  c0:	c0 98       	cbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	88 e8       	ldi	r24, 0x88	; 136
  c4:	93 e1       	ldi	r25, 0x13	; 19
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wypisz+0x34>
    _delay_ms(20);  //odczekanie czasu na potwierdzenie wyslania danych
}
  ca:	08 95       	ret

000000cc <czyscLCD>:
void czyscLCD()
{
	posX =0;
  cc:	10 92 a4 00 	sts	0x00A4, r1
  d0:	10 92 a3 00 	sts	0x00A3, r1
	posY=0;
  d4:	10 92 a2 00 	sts	0x00A2, r1
  d8:	10 92 a1 00 	sts	0x00A1, r1
    //LCD_PORT &= ~(_BV(LCD_RS));
    wypisz(0x01,LCD_COMMAND);   //wysylamy polecenie wyczyszczenia
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	61 e0       	ldi	r22, 0x01	; 1
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
  e6:	82 ee       	ldi	r24, 0xE2	; 226
  e8:	94 e0       	ldi	r25, 0x04	; 4
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <czyscLCD+0x1e>
    //LCD_PORT |= _BV(LCD_RS);    
    _delay_ms(5);
}
  ee:	08 95       	ret

000000f0 <inicjalizacjaLCD>:

void inicjalizacjaLCD()
{
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
    LCD_DDR = (0xF0) | (_BV(LCD_RS)) | (_BV(LCD_EN));   //ustawienie kierunku wyjsciowego dla wszystkich lini
  f4:	83 ef       	ldi	r24, 0xF3	; 243
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	04 ef       	ldi	r16, 0xF4	; 244
  fa:	11 e0       	ldi	r17, 0x01	; 1
  fc:	c8 01       	movw	r24, r16
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <inicjalizacjaLCD+0xe>
	_delay_ms(2);
    LCD_PORT = 0;   //ustawienie pocz¹tkowego stanu niskiego na wszystkich liniach
 102:	18 ba       	out	0x18, r1	; 24
    LCD_PORT &= ~(_BV(LCD_RS));  //rozpoczêcie wysylania komendy
 104:	c1 98       	cbi	0x18, 1	; 24
    wypisz(0x02,LCD_COMMAND);
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 110:	c8 01       	movw	r24, r16
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <inicjalizacjaLCD+0x22>
	_delay_ms(2);
	//LCD_PORT &= ~(_BV(LCD_RS));
    //LCD_PORT |= _BV(LCD_EN);
	wypisz(0b00101000,LCD_COMMAND);
 116:	88 e2       	ldi	r24, 0x28	; 40
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 120:	08 e8       	ldi	r16, 0x88	; 136
 122:	13 e1       	ldi	r17, 0x13	; 19
 124:	c8 01       	movw	r24, r16
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <inicjalizacjaLCD+0x36>
	_delay_ms(20);
    wypisz(0b00000110,LCD_COMMAND);
 12a:	86 e0       	ldi	r24, 0x06	; 6
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 134:	c8 01       	movw	r24, r16
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <inicjalizacjaLCD+0x46>
	_delay_ms(20);
    wypisz(0b00001100,LCD_COMMAND);
 13a:	8c e0       	ldi	r24, 0x0C	; 12
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 144:	c8 01       	movw	r24, r16
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <inicjalizacjaLCD+0x56>
	_delay_ms(20);
    czyscLCD();
 14a:	0e 94 66 00 	call	0xcc	; 0xcc <czyscLCD>
}
 14e:	1f 91       	pop	r17
 150:	0f 91       	pop	r16
 152:	08 95       	ret

00000154 <ustawKursor>:

void ustawKursor(unsigned char w, unsigned char h)
{
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	06 2f       	mov	r16, r22
    //LCD_PORT &= ~(_BV(LCD_RS));
    wypisz((w*0x40+h) | 0x80,LCD_COMMAND);
 15e:	e8 2e       	mov	r14, r24
 160:	ff 24       	eor	r15, r15
 162:	c7 01       	movw	r24, r14
 164:	26 e0       	ldi	r18, 0x06	; 6
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	2a 95       	dec	r18
 16c:	e1 f7       	brne	.-8      	; 0x166 <ustawKursor+0x12>
 16e:	86 0f       	add	r24, r22
 170:	80 68       	ori	r24, 0x80	; 128
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
    //LCD_PORT |= _BV(LCD_RS);
	posX = w;
 17a:	f0 92 a4 00 	sts	0x00A4, r15
 17e:	e0 92 a3 00 	sts	0x00A3, r14
	posY = h;
 182:	10 e0       	ldi	r17, 0x00	; 0
 184:	10 93 a2 00 	sts	0x00A2, r17
 188:	00 93 a1 00 	sts	0x00A1, r16
 18c:	82 ee       	ldi	r24, 0xE2	; 226
 18e:	94 e0       	ldi	r25, 0x04	; 4
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <ustawKursor+0x3c>
    _delay_ms(5);

}
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	08 95       	ret

0000019e <napisz>:

void napisz(char *tekst, int8_t dlugosc)
{
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	06 2f       	mov	r16, r22
 1a8:	ec 01       	movw	r28, r24
 1aa:	10 e0       	ldi	r17, 0x00	; 0
 1ac:	0c c0       	rjmp	.+24     	; 0x1c6 <napisz+0x28>
    int8_t i=0;
    while (i<dlugosc)   //przejscie po wszystkich znakach tekstu
    {
        if (i==16)  //jezeli trafi na 16 znak (ostatni), to przesun kursor na poczatek 2 linii
 1ae:	10 31       	cpi	r17, 0x10	; 16
 1b0:	21 f4       	brne	.+8      	; 0x1ba <napisz+0x1c>
        {
            ustawKursor(1,0);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
        }
        wypisz(tekst[i],LCD_DATA);   //wypisz i-ty znak tekstu
 1ba:	89 91       	ld	r24, Y+
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	70 e0       	ldi	r23, 0x00	; 0
 1c0:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
        i++;
 1c4:	1f 5f       	subi	r17, 0xFF	; 255
}

void napisz(char *tekst, int8_t dlugosc)
{
    int8_t i=0;
    while (i<dlugosc)   //przejscie po wszystkich znakach tekstu
 1c6:	10 17       	cp	r17, r16
 1c8:	94 f3       	brlt	.-28     	; 0x1ae <napisz+0x10>
            ustawKursor(1,0);
        }
        wypisz(tekst[i],LCD_DATA);   //wypisz i-ty znak tekstu
        i++;
    }
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <czyscLCD_y>:

void czyscLCD_y(unsigned char y){
 1d4:	0f 93       	push	r16
 1d6:	1f 93       	push	r17
 1d8:	08 2f       	mov	r16, r24
	ustawKursor(posX,0);
 1da:	80 91 a3 00 	lds	r24, 0x00A3
 1de:	90 91 a4 00 	lds	r25, 0x00A4
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
 1e8:	10 e0       	ldi	r17, 0x00	; 0
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <czyscLCD_y+0x24>
	for (uint8_t i=0; i<y ; i++)
		wypisz(0x14,LCD_COMMAND);
 1ec:	84 e1       	ldi	r24, 0x14	; 20
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
    }
}

void czyscLCD_y(unsigned char y){
	ustawKursor(posX,0);
	for (uint8_t i=0; i<y ; i++)
 1f6:	1f 5f       	subi	r17, 0xFF	; 255
 1f8:	10 17       	cp	r17, r16
 1fa:	c0 f3       	brcs	.-16     	; 0x1ec <czyscLCD_y+0x18>
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <czyscLCD_y+0x36>
		wypisz(0x14,LCD_COMMAND);
	while(y++ <= 16)
		wypisz(' ',LCD_DATA);
 1fe:	80 e2       	ldi	r24, 0x20	; 32
 200:	60 e0       	ldi	r22, 0x00	; 0
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 208:	0f 5f       	subi	r16, 0xFF	; 255

void czyscLCD_y(unsigned char y){
	ustawKursor(posX,0);
	for (uint8_t i=0; i<y ; i++)
		wypisz(0x14,LCD_COMMAND);
	while(y++ <= 16)
 20a:	01 31       	cpi	r16, 0x11	; 17
 20c:	c0 f3       	brcs	.-16     	; 0x1fe <czyscLCD_y+0x2a>
		wypisz(' ',LCD_DATA);
}
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	08 95       	ret

00000214 <klawiatura>:
 
ISR(TIMER0_COMP_vect) { // przerwanie timer0
	klawiatura();   
}

void klawiatura(){
 214:	ef 92       	push	r14
 216:	ff 92       	push	r15
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	10 e0       	ldi	r17, 0x00	; 0
 220:	c4 e0       	ldi	r28, 0x04	; 4
 222:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i,wyjscie = 0x00;
	for (i=4 ; i<8 ; i++){
	    PORTA = ~_BV(i); // u¿ycie makra
 224:	31 e0       	ldi	r19, 0x01	; 1
 226:	e3 2e       	mov	r14, r19
 228:	f1 2c       	mov	r15, r1
 22a:	c7 01       	movw	r24, r14
 22c:	0c 2e       	mov	r0, r28
 22e:	02 c0       	rjmp	.+4      	; 0x234 <klawiatura+0x20>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	0a 94       	dec	r0
 236:	e2 f7       	brpl	.-8      	; 0x230 <klawiatura+0x1c>
 238:	80 95       	com	r24
 23a:	8b bb       	out	0x1b, r24	; 27
	        stan = PINA & 0x0F; // odczytanie stanu PINA i maskowanie
 23c:	89 b3       	in	r24, 0x19	; 25
 23e:	8f 70       	andi	r24, 0x0F	; 15
 240:	80 93 a0 00 	sts	0x00A0, r24
	        switch(stan) { // dopasowanie stanu PINA do dzia³ania programu
 244:	80 91 a0 00 	lds	r24, 0x00A0
 248:	8d 30       	cpi	r24, 0x0D	; 13
 24a:	81 f0       	breq	.+32     	; 0x26c <klawiatura+0x58>
 24c:	8e 30       	cpi	r24, 0x0E	; 14
 24e:	28 f4       	brcc	.+10     	; 0x25a <klawiatura+0x46>
 250:	87 30       	cpi	r24, 0x07	; 7
 252:	91 f0       	breq	.+36     	; 0x278 <klawiatura+0x64>
 254:	8b 30       	cpi	r24, 0x0B	; 11
 256:	99 f4       	brne	.+38     	; 0x27e <klawiatura+0x6a>
 258:	0c c0       	rjmp	.+24     	; 0x272 <klawiatura+0x5e>
 25a:	8e 30       	cpi	r24, 0x0E	; 14
 25c:	21 f0       	breq	.+8      	; 0x266 <klawiatura+0x52>
 25e:	8f 30       	cpi	r24, 0x0F	; 15
 260:	71 f4       	brne	.+28     	; 0x27e <klawiatura+0x6a>
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	0c c0       	rjmp	.+24     	; 0x27e <klawiatura+0x6a>
 266:	ce 01       	movw	r24, r28
 268:	83 50       	subi	r24, 0x03	; 3
 26a:	08 c0       	rjmp	.+16     	; 0x27c <klawiatura+0x68>
	            case 0b00001111: 
	                wyjscie = 0; // obliczone stany na wyjciu
	                break;
	            case 0b00001110:
	                wyjscie = i-3;
	                break;
 26c:	ce 01       	movw	r24, r28
 26e:	8f 5f       	subi	r24, 0xFF	; 255
 270:	05 c0       	rjmp	.+10     	; 0x27c <klawiatura+0x68>
	            case 0b00001101:
	                wyjscie = 4+i-3;
	                break;
 272:	ce 01       	movw	r24, r28
 274:	8b 5f       	subi	r24, 0xFB	; 251
 276:	02 c0       	rjmp	.+4      	; 0x27c <klawiatura+0x68>
	            case 0b00001011:
	                wyjscie = 8+i-3;
	                break;
 278:	ce 01       	movw	r24, r28
 27a:	87 5f       	subi	r24, 0xF7	; 247
 27c:	18 2f       	mov	r17, r24
	                wyjscie = 12+i-3;
	                break;
	            default:
	                break;
	        };
		PORTC = wyjscie; // wywietlenie stanu na linijce LED
 27e:	15 bb       	out	0x15, r17	; 21
		switch(PORTC){
 280:	85 b3       	in	r24, 0x15	; 21
 282:	88 30       	cpi	r24, 0x08	; 8
 284:	09 f4       	brne	.+2      	; 0x288 <klawiatura+0x74>
 286:	76 c0       	rjmp	.+236    	; 0x374 <klawiatura+0x160>
 288:	89 30       	cpi	r24, 0x09	; 9
 28a:	a0 f4       	brcc	.+40     	; 0x2b4 <klawiatura+0xa0>
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	09 f4       	brne	.+2      	; 0x292 <klawiatura+0x7e>
 290:	49 c0       	rjmp	.+146    	; 0x324 <klawiatura+0x110>
 292:	85 30       	cpi	r24, 0x05	; 5
 294:	40 f4       	brcc	.+16     	; 0x2a6 <klawiatura+0x92>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	81 f1       	breq	.+96     	; 0x2fa <klawiatura+0xe6>
 29a:	83 30       	cpi	r24, 0x03	; 3
 29c:	c8 f5       	brcc	.+114    	; 0x310 <klawiatura+0xfc>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	09 f0       	breq	.+2      	; 0x2a4 <klawiatura+0x90>
 2a2:	c4 c0       	rjmp	.+392    	; 0x42c <klawiatura+0x218>
 2a4:	20 c0       	rjmp	.+64     	; 0x2e6 <klawiatura+0xd2>
 2a6:	86 30       	cpi	r24, 0x06	; 6
 2a8:	09 f4       	brne	.+2      	; 0x2ac <klawiatura+0x98>
 2aa:	50 c0       	rjmp	.+160    	; 0x34c <klawiatura+0x138>
 2ac:	87 30       	cpi	r24, 0x07	; 7
 2ae:	08 f0       	brcs	.+2      	; 0x2b2 <klawiatura+0x9e>
 2b0:	57 c0       	rjmp	.+174    	; 0x360 <klawiatura+0x14c>
 2b2:	42 c0       	rjmp	.+132    	; 0x338 <klawiatura+0x124>
 2b4:	8c 30       	cpi	r24, 0x0C	; 12
 2b6:	09 f4       	brne	.+2      	; 0x2ba <klawiatura+0xa6>
 2b8:	85 c0       	rjmp	.+266    	; 0x3c4 <klawiatura+0x1b0>
 2ba:	8d 30       	cpi	r24, 0x0D	; 13
 2bc:	38 f4       	brcc	.+14     	; 0x2cc <klawiatura+0xb8>
 2be:	8a 30       	cpi	r24, 0x0A	; 10
 2c0:	09 f4       	brne	.+2      	; 0x2c4 <klawiatura+0xb0>
 2c2:	6c c0       	rjmp	.+216    	; 0x39c <klawiatura+0x188>
 2c4:	8b 30       	cpi	r24, 0x0B	; 11
 2c6:	08 f0       	brcs	.+2      	; 0x2ca <klawiatura+0xb6>
 2c8:	73 c0       	rjmp	.+230    	; 0x3b0 <klawiatura+0x19c>
 2ca:	5e c0       	rjmp	.+188    	; 0x388 <klawiatura+0x174>
 2cc:	8e 30       	cpi	r24, 0x0E	; 14
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <klawiatura+0xbe>
 2d0:	8d c0       	rjmp	.+282    	; 0x3ec <klawiatura+0x1d8>
 2d2:	8e 30       	cpi	r24, 0x0E	; 14
 2d4:	08 f4       	brcc	.+2      	; 0x2d8 <klawiatura+0xc4>
 2d6:	80 c0       	rjmp	.+256    	; 0x3d8 <klawiatura+0x1c4>
 2d8:	8f 30       	cpi	r24, 0x0F	; 15
 2da:	09 f4       	brne	.+2      	; 0x2de <klawiatura+0xca>
 2dc:	91 c0       	rjmp	.+290    	; 0x400 <klawiatura+0x1ec>
 2de:	80 31       	cpi	r24, 0x10	; 16
 2e0:	09 f0       	breq	.+2      	; 0x2e4 <klawiatura+0xd0>
 2e2:	a4 c0       	rjmp	.+328    	; 0x42c <klawiatura+0x218>
 2e4:	97 c0       	rjmp	.+302    	; 0x414 <klawiatura+0x200>
		case 1:
			czyscLCD_y(13);
 2e6:	8d e0       	ldi	r24, 0x0D	; 13
 2e8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	6e e0       	ldi	r22, 0x0E	; 14
 2f0:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("1",1);
 2f4:	80 e6       	ldi	r24, 0x60	; 96
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	09 c0       	rjmp	.+18     	; 0x30c <klawiatura+0xf8>
			break;
		case 2:
			czyscLCD_y(13);
 2fa:	8d e0       	ldi	r24, 0x0D	; 13
 2fc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	6e e0       	ldi	r22, 0x0E	; 14
 304:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("2",1);
 308:	82 e6       	ldi	r24, 0x62	; 98
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	8c c0       	rjmp	.+280    	; 0x428 <klawiatura+0x214>
			break;
		case 3:
			czyscLCD_y(13);
 310:	8d e0       	ldi	r24, 0x0D	; 13
 312:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	6e e0       	ldi	r22, 0x0E	; 14
 31a:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("3",1);
 31e:	84 e6       	ldi	r24, 0x64	; 100
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	f4 cf       	rjmp	.-24     	; 0x30c <klawiatura+0xf8>
			break;
		case 4:
			czyscLCD_y(13);
 324:	8d e0       	ldi	r24, 0x0D	; 13
 326:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	6e e0       	ldi	r22, 0x0E	; 14
 32e:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("4",1);
 332:	86 e6       	ldi	r24, 0x66	; 102
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ea cf       	rjmp	.-44     	; 0x30c <klawiatura+0xf8>
			break;
		case 5:
			czyscLCD_y(13);
 338:	8d e0       	ldi	r24, 0x0D	; 13
 33a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	6e e0       	ldi	r22, 0x0E	; 14
 342:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("5",1);
 346:	88 e6       	ldi	r24, 0x68	; 104
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	e0 cf       	rjmp	.-64     	; 0x30c <klawiatura+0xf8>
			break;
		case 6:
			czyscLCD_y(13);
 34c:	8d e0       	ldi	r24, 0x0D	; 13
 34e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	6e e0       	ldi	r22, 0x0E	; 14
 356:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("6",1);
 35a:	8a e6       	ldi	r24, 0x6A	; 106
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	d6 cf       	rjmp	.-84     	; 0x30c <klawiatura+0xf8>
			break;
		case 7:
			czyscLCD_y(13);
 360:	8d e0       	ldi	r24, 0x0D	; 13
 362:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	6e e0       	ldi	r22, 0x0E	; 14
 36a:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("7",1);
 36e:	8c e6       	ldi	r24, 0x6C	; 108
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	cc cf       	rjmp	.-104    	; 0x30c <klawiatura+0xf8>
			break;
		case 8:
			czyscLCD_y(13);
 374:	8d e0       	ldi	r24, 0x0D	; 13
 376:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	6e e0       	ldi	r22, 0x0E	; 14
 37e:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("8",1);
 382:	8e e6       	ldi	r24, 0x6E	; 110
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	c2 cf       	rjmp	.-124    	; 0x30c <klawiatura+0xf8>
			break;
		case 9:
			czyscLCD_y(13);
 388:	8d e0       	ldi	r24, 0x0D	; 13
 38a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	6e e0       	ldi	r22, 0x0E	; 14
 392:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("9",1);
 396:	80 e7       	ldi	r24, 0x70	; 112
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	b8 cf       	rjmp	.-144    	; 0x30c <klawiatura+0xf8>
			break;
		case 10:
			czyscLCD_y(13);
 39c:	8d e0       	ldi	r24, 0x0D	; 13
 39e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	6e e0       	ldi	r22, 0x0E	; 14
 3a6:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("10",2);
 3aa:	82 e7       	ldi	r24, 0x72	; 114
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	3b c0       	rjmp	.+118    	; 0x426 <klawiatura+0x212>
			break;
		case 11:
			czyscLCD_y(13);
 3b0:	8d e0       	ldi	r24, 0x0D	; 13
 3b2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	6e e0       	ldi	r22, 0x0E	; 14
 3ba:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("11",2);
 3be:	85 e7       	ldi	r24, 0x75	; 117
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	31 c0       	rjmp	.+98     	; 0x426 <klawiatura+0x212>
			break;
		case 12:
			czyscLCD_y(13);
 3c4:	8d e0       	ldi	r24, 0x0D	; 13
 3c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	6e e0       	ldi	r22, 0x0E	; 14
 3ce:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("12",2);
 3d2:	88 e7       	ldi	r24, 0x78	; 120
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	27 c0       	rjmp	.+78     	; 0x426 <klawiatura+0x212>
			break;
		case 13:
			czyscLCD_y(13);
 3d8:	8d e0       	ldi	r24, 0x0D	; 13
 3da:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	6e e0       	ldi	r22, 0x0E	; 14
 3e2:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("13",2);
 3e6:	8b e7       	ldi	r24, 0x7B	; 123
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	1d c0       	rjmp	.+58     	; 0x426 <klawiatura+0x212>
			break;
		case 14:
			czyscLCD_y(13);
 3ec:	8d e0       	ldi	r24, 0x0D	; 13
 3ee:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	6e e0       	ldi	r22, 0x0E	; 14
 3f6:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("14",2);
 3fa:	8e e7       	ldi	r24, 0x7E	; 126
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	13 c0       	rjmp	.+38     	; 0x426 <klawiatura+0x212>
			break;
		case 15:
			czyscLCD_y(13);
 400:	8d e0       	ldi	r24, 0x0D	; 13
 402:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	6e e0       	ldi	r22, 0x0E	; 14
 40a:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("15",2);
 40e:	81 e8       	ldi	r24, 0x81	; 129
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	09 c0       	rjmp	.+18     	; 0x426 <klawiatura+0x212>
			break;
		case 16:
			czyscLCD_y(13);
 414:	8d e0       	ldi	r24, 0x0D	; 13
 416:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <czyscLCD_y>
			ustawKursor(1,14);
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	6e e0       	ldi	r22, 0x0E	; 14
 41e:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
			napisz("16",2);
 422:	84 e8       	ldi	r24, 0x84	; 132
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	62 e0       	ldi	r22, 0x02	; 2
 428:	0e 94 cf 00 	call	0x19e	; 0x19e <napisz>
 42c:	21 96       	adiw	r28, 0x01	; 1
	klawiatura();   
}

void klawiatura(){
	uint8_t i,wyjscie = 0x00;
	for (i=4 ; i<8 ; i++){
 42e:	c8 30       	cpi	r28, 0x08	; 8
 430:	d1 05       	cpc	r29, r1
 432:	09 f0       	breq	.+2      	; 0x436 <klawiatura+0x222>
 434:	fa ce       	rjmp	.-524    	; 0x22a <klawiatura+0x16>
			ustawKursor(1,14);
			napisz("16",2);
			break;
		}
    }
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	1f 91       	pop	r17
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	08 95       	ret

00000442 <__vector_10>:
		wypisz(0x14,LCD_COMMAND);
	while(y++ <= 16)
		wypisz(' ',LCD_DATA);
}
 
ISR(TIMER0_COMP_vect) { // przerwanie timer0
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	2f 93       	push	r18
 44e:	3f 93       	push	r19
 450:	4f 93       	push	r20
 452:	5f 93       	push	r21
 454:	6f 93       	push	r22
 456:	7f 93       	push	r23
 458:	8f 93       	push	r24
 45a:	9f 93       	push	r25
 45c:	af 93       	push	r26
 45e:	bf 93       	push	r27
 460:	ef 93       	push	r30
 462:	ff 93       	push	r31
	klawiatura();   
 464:	0e 94 0a 01 	call	0x214	; 0x214 <klawiatura>
}
 468:	ff 91       	pop	r31
 46a:	ef 91       	pop	r30
 46c:	bf 91       	pop	r27
 46e:	af 91       	pop	r26
 470:	9f 91       	pop	r25
 472:	8f 91       	pop	r24
 474:	7f 91       	pop	r23
 476:	6f 91       	pop	r22
 478:	5f 91       	pop	r21
 47a:	4f 91       	pop	r20
 47c:	3f 91       	pop	r19
 47e:	2f 91       	pop	r18
 480:	0f 90       	pop	r0
 482:	0f be       	out	0x3f, r0	; 63
 484:	0f 90       	pop	r0
 486:	1f 90       	pop	r1
 488:	18 95       	reti

0000048a <main>:
			break;
		}
    }
}
int main(void)
{
 48a:	df 93       	push	r29
 48c:	cf 93       	push	r28
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	68 97       	sbiw	r28, 0x18	; 24
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xF0; // ustawienie czêci portu A w stan wejcia
 49e:	80 ef       	ldi	r24, 0xF0	; 240
 4a0:	8a bb       	out	0x1a, r24	; 26
    PORTA = 0x0F; // podci¹gniêcie portu A
 4a2:	8f e0       	ldi	r24, 0x0F	; 15
 4a4:	8b bb       	out	0x1b, r24	; 27
    DDRC |= 0x1F; // ustawienie 5 bitów portu C w stan wyjcia
 4a6:	84 b3       	in	r24, 0x14	; 20
 4a8:	8f 61       	ori	r24, 0x1F	; 31
 4aa:	84 bb       	out	0x14, r24	; 20
    PORTC = 0x01; // stan pocz¹tkowy portu C
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	85 bb       	out	0x15, r24	; 21
    TCCR0 |= 1 << WGM01 | 1 << CS00 | 1 << CS02; // tryb CTC i preskaler 1024
 4b0:	83 b7       	in	r24, 0x33	; 51
 4b2:	8d 60       	ori	r24, 0x0D	; 13
 4b4:	83 bf       	out	0x33, r24	; 51
    TIMSK |= 1 << OCIE0; // flaga przepe³nienia
 4b6:	89 b7       	in	r24, 0x39	; 57
 4b8:	82 60       	ori	r24, 0x02	; 2
 4ba:	89 bf       	out	0x39, r24	; 57
    OCR0 = 5; // czas 5ms 
 4bc:	85 e0       	ldi	r24, 0x05	; 5
 4be:	8c bf       	out	0x3c, r24	; 60
    TCNT0 = 0; // wartoæ startowa timera
 4c0:	12 be       	out	0x32, r1	; 50
    sei();
 4c2:	78 94       	sei
	inicjalizacjaLCD();
 4c4:	0e 94 78 00 	call	0xf0	; 0xf0 <inicjalizacjaLCD>
	char tekst1[]={'M','a','k','s','y','m','i','u','k',' ','K','.'};
 4c8:	de 01       	movw	r26, r28
 4ca:	11 96       	adiw	r26, 0x01	; 1
 4cc:	e3 e9       	ldi	r30, 0x93	; 147
 4ce:	f0 e0       	ldi	r31, 0x00	; 0
 4d0:	8c e0       	ldi	r24, 0x0C	; 12
 4d2:	01 90       	ld	r0, Z+
 4d4:	0d 92       	st	X+, r0
 4d6:	81 50       	subi	r24, 0x01	; 1
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <main+0x48>
	char tekst2[]={'P','r','z','y','c','i','s','k',' ','n','r',':'};
 4da:	de 01       	movw	r26, r28
 4dc:	1d 96       	adiw	r26, 0x0d	; 13
 4de:	e7 e8       	ldi	r30, 0x87	; 135
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	8c e0       	ldi	r24, 0x0C	; 12
 4e4:	01 90       	ld	r0, Z+
 4e6:	0d 92       	st	X+, r0
 4e8:	81 50       	subi	r24, 0x01	; 1
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <main+0x5a>
	
	czyscLCD();
 4ec:	0e 94 66 00 	call	0xcc	; 0xcc <czyscLCD>
	ustawKursor(0,0);
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
	napisz(tekst1,12);
 4f8:	ce 01       	movw	r24, r28
 4fa:	01 96       	adiw	r24, 0x01	; 1
 4fc:	6c e0       	ldi	r22, 0x0C	; 12
 4fe:	0e 94 cf 00 	call	0x19e	; 0x19e <napisz>
	ustawKursor(1,0);
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	60 e0       	ldi	r22, 0x00	; 0
 506:	0e 94 aa 00 	call	0x154	; 0x154 <ustawKursor>
	napisz(tekst2,12);
 50a:	ce 01       	movw	r24, r28
 50c:	0d 96       	adiw	r24, 0x0d	; 13
 50e:	6c e0       	ldi	r22, 0x0C	; 12
 510:	0e 94 cf 00 	call	0x19e	; 0x19e <napisz>
 514:	ff cf       	rjmp	.-2      	; 0x514 <main+0x8a>

00000516 <_exit>:
 516:	f8 94       	cli

00000518 <__stop_program>:
 518:	ff cf       	rjmp	.-2      	; 0x518 <__stop_program>
