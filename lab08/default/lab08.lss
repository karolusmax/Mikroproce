
lab08.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  000005a8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800096  00800096  00000672  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000672  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000108  00000000  00000000  00000692  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d6  00000000  00000000  0000079a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000177  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000662  00000000  00000000  00000de7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017d  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000014c  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ea       	ldi	r30, 0xA8	; 168
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 39       	cpi	r26, 0x9E	; 158
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
  8a:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wypisz>:
char liniaMenu=1;
char menuProgram=0;
char menuPom=0;

void wypisz(uint8_t b,int command_mode)
{
  92:	28 2f       	mov	r18, r24
	if(command_mode){
  94:	67 2b       	or	r22, r23
  96:	11 f0       	breq	.+4      	; 0x9c <wypisz+0xa>
		LCD_PORT &= ~(_BV(LCD_RS)); //przestawia na lini RS wartosc na 0 po to by wyslac komende a nie dane
  98:	c1 98       	cbi	0x18, 1	; 24
  9a:	01 c0       	rjmp	.+2      	; 0x9e <wypisz+0xc>
	} else {
		LCD_PORT |= _BV(LCD_RS);//przestawia linie RS na wartosc 1 odpowiadajaca wprowadzaniu danych
  9c:	c1 9a       	sbi	0x18, 1	; 24
	}
    LCD_PORT |= _BV(LCD_EN);    //wlaczenie linii ENABLE
  9e:	c0 9a       	sbi	0x18, 0	; 24
    LCD_PORT = (b & 0xF0) | (LCD_PORT & 0x0F);  //wyslanie 4 starszych bitow
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	92 2f       	mov	r25, r18
  a4:	90 7f       	andi	r25, 0xF0	; 240
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	98 2b       	or	r25, r24
  aa:	98 bb       	out	0x18, r25	; 24
    LCD_PORT &= ~(_BV(LCD_EN)); //potwierdzenie wyslania danych poprzez opadniecie ENABLE
  ac:	c0 98       	cbi	0x18, 0	; 24
    asm volatile("nop");    //oczekiwanie jednego cyklu
  ae:	00 00       	nop
    LCD_PORT |= _BV(LCD_EN);
  b0:	c0 9a       	sbi	0x18, 0	; 24
    LCD_PORT = ((b & 0x0F) << 4) | (LCD_PORT & 0x0F);   //wyslanie 4 mlodszych bitow
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	22 95       	swap	r18
  b6:	20 7f       	andi	r18, 0xF0	; 240
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	82 2b       	or	r24, r18
  bc:	88 bb       	out	0x18, r24	; 24
    LCD_PORT &= ~(_BV(LCD_EN));
  be:	c0 98       	cbi	0x18, 0	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c0:	88 e8       	ldi	r24, 0x88	; 136
  c2:	93 e1       	ldi	r25, 0x13	; 19
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <wypisz+0x32>
    _delay_ms(20);  //odczekanie czasu na potwierdzenie wyslania danych
}
  c8:	08 95       	ret

000000ca <czyscLCD>:
void czyscLCD()
{
	posX =0;
  ca:	10 92 9d 00 	sts	0x009D, r1
  ce:	10 92 9c 00 	sts	0x009C, r1
	posY=0;
  d2:	10 92 9b 00 	sts	0x009B, r1
  d6:	10 92 9a 00 	sts	0x009A, r1
    //LCD_PORT &= ~(_BV(LCD_RS));
    wypisz(0x01,LCD_COMMAND);   //wysylamy polecenie wyczyszczenia
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
  e4:	82 ee       	ldi	r24, 0xE2	; 226
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <czyscLCD+0x1e>
    //LCD_PORT |= _BV(LCD_RS);    
    _delay_ms(5);
}
  ec:	08 95       	ret

000000ee <inicjalizacjaLCD>:

void inicjalizacjaLCD()
{
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
    LCD_DDR = (0xF0) | (_BV(LCD_RS)) | (_BV(LCD_EN));   //ustawienie kierunku wyjsciowego dla wszystkich lini
  f2:	83 ef       	ldi	r24, 0xF3	; 243
  f4:	87 bb       	out	0x17, r24	; 23
  f6:	04 ef       	ldi	r16, 0xF4	; 244
  f8:	11 e0       	ldi	r17, 0x01	; 1
  fa:	c8 01       	movw	r24, r16
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <inicjalizacjaLCD+0xe>
	_delay_ms(2);
    LCD_PORT = 0;   //ustawienie pocz¹tkowego stanu niskiego na wszystkich liniach
 100:	18 ba       	out	0x18, r1	; 24
    LCD_PORT &= ~(_BV(LCD_RS));  //rozpoczêcie wysylania komendy
 102:	c1 98       	cbi	0x18, 1	; 24
    wypisz(0x02,LCD_COMMAND);
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	61 e0       	ldi	r22, 0x01	; 1
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 10e:	c8 01       	movw	r24, r16
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <inicjalizacjaLCD+0x22>
	_delay_ms(2);
	//LCD_PORT &= ~(_BV(LCD_RS));
    //LCD_PORT |= _BV(LCD_EN);
	wypisz(0b00101000,LCD_COMMAND);
 114:	88 e2       	ldi	r24, 0x28	; 40
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 11e:	c8 01       	movw	r24, r16
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <inicjalizacjaLCD+0x32>
	_delay_ms(2);
    wypisz(0b00000110,LCD_COMMAND);
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 12e:	c8 01       	movw	r24, r16
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <inicjalizacjaLCD+0x42>
	_delay_ms(2);
    wypisz(0b00001100,LCD_COMMAND);
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	70 e0       	ldi	r23, 0x00	; 0
 13a:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 13e:	c8 01       	movw	r24, r16
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <inicjalizacjaLCD+0x52>
	_delay_ms(2);
    czyscLCD();
 144:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
}
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	08 95       	ret

0000014e <ustawKursor>:

void ustawKursor(unsigned char w, unsigned char h)
{
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	06 2f       	mov	r16, r22
    wypisz((w*0x40+h) | 0x80,LCD_COMMAND);
 158:	e8 2e       	mov	r14, r24
 15a:	ff 24       	eor	r15, r15
 15c:	c7 01       	movw	r24, r14
 15e:	26 e0       	ldi	r18, 0x06	; 6
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	2a 95       	dec	r18
 166:	e1 f7       	brne	.-8      	; 0x160 <ustawKursor+0x12>
 168:	86 0f       	add	r24, r22
 16a:	80 68       	ori	r24, 0x80	; 128
 16c:	61 e0       	ldi	r22, 0x01	; 1
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
	posX = w;
 174:	f0 92 9d 00 	sts	0x009D, r15
 178:	e0 92 9c 00 	sts	0x009C, r14
	posY = h;
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	10 93 9b 00 	sts	0x009B, r17
 182:	00 93 9a 00 	sts	0x009A, r16
 186:	82 ee       	ldi	r24, 0xE2	; 226
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <ustawKursor+0x3c>
    _delay_ms(5);
}
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	08 95       	ret

00000198 <napisz>:

void napisz(char *tekst, int8_t dlugosc)
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	06 2f       	mov	r16, r22
 1a2:	ec 01       	movw	r28, r24
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <napisz+0x28>
    int8_t i=0;
    while (i<dlugosc)   //przejscie po wszystkich znakach tekstu
    {
        if (i==16)  //jezeli trafi na 16 znak (ostatni), to przesun kursor na poczatek 2 linii
 1a8:	10 31       	cpi	r17, 0x10	; 16
 1aa:	21 f4       	brne	.+8      	; 0x1b4 <napisz+0x1c>
        {
            ustawKursor(1,0);
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
        }
        wypisz(tekst[i],LCD_DATA);   //wypisz i-ty znak tekstu
 1b4:	89 91       	ld	r24, Y+
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
        i++;
 1be:	1f 5f       	subi	r17, 0xFF	; 255
}

void napisz(char *tekst, int8_t dlugosc)
{
    int8_t i=0;
    while (i<dlugosc)   //przejscie po wszystkich znakach tekstu
 1c0:	10 17       	cp	r17, r16
 1c2:	94 f3       	brlt	.-28     	; 0x1a8 <napisz+0x10>
            ustawKursor(1,0);
        }
        wypisz(tekst[i],LCD_DATA);   //wypisz i-ty znak tekstu
        i++;
    }
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	08 95       	ret

000001ce <czyscLCD_y>:

void czyscLCD_y(unsigned char y){
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	08 2f       	mov	r16, r24
	ustawKursor(posX,0);
 1d4:	80 91 9c 00 	lds	r24, 0x009C
 1d8:	90 91 9d 00 	lds	r25, 0x009D
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	06 c0       	rjmp	.+12     	; 0x1f2 <czyscLCD_y+0x24>
	for (uint8_t i=0; i<y ; i++)
		wypisz(0x14,LCD_COMMAND);
 1e6:	84 e1       	ldi	r24, 0x14	; 20
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
    }
}

void czyscLCD_y(unsigned char y){
	ustawKursor(posX,0);
	for (uint8_t i=0; i<y ; i++)
 1f0:	1f 5f       	subi	r17, 0xFF	; 255
 1f2:	10 17       	cp	r17, r16
 1f4:	c0 f3       	brcs	.-16     	; 0x1e6 <czyscLCD_y+0x18>
 1f6:	06 c0       	rjmp	.+12     	; 0x204 <czyscLCD_y+0x36>
		wypisz(0x14,LCD_COMMAND);
	while(y++ <= 16)
		wypisz(' ',LCD_DATA);
 1f8:	80 e2       	ldi	r24, 0x20	; 32
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	0e 94 49 00 	call	0x92	; 0x92 <wypisz>
 202:	0f 5f       	subi	r16, 0xFF	; 255

void czyscLCD_y(unsigned char y){
	ustawKursor(posX,0);
	for (uint8_t i=0; i<y ; i++)
		wypisz(0x14,LCD_COMMAND);
	while(y++ <= 16)
 204:	01 31       	cpi	r16, 0x11	; 17
 206:	c0 f3       	brcs	.-16     	; 0x1f8 <czyscLCD_y+0x2a>
		wypisz(' ',LCD_DATA);
}
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	08 95       	ret

0000020e <menu1>:
		menu3();
	} 
		
}
void menu1(){
	czyscLCD();
 20e:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
	ustawKursor(0,0);
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
	napisz("1.Przyciski",11);
 21a:	80 e6       	ldi	r24, 0x60	; 96
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	6b e0       	ldi	r22, 0x0B	; 11
 220:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
}
 224:	08 95       	ret

00000226 <menu2>:
void menu2(){
	switch(liniaMenu){
 226:	80 91 95 00 	lds	r24, 0x0095
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	19 f0       	breq	.+6      	; 0x234 <menu2+0xe>
 22e:	82 30       	cpi	r24, 0x02	; 2
 230:	e1 f5       	brne	.+120    	; 0x2aa <menu2+0x84>
 232:	1e c0       	rjmp	.+60     	; 0x270 <menu2+0x4a>
	case 1:
		czyscLCD();
 234:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
		ustawKursor(0,0);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
		napisz("2.1 Timer",9);
 240:	8c e6       	ldi	r24, 0x6C	; 108
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	69 e0       	ldi	r22, 0x09	; 9
 246:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
		ustawKursor(1,0);
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
		napisz("2.2 Stoper",10);
 252:	86 e7       	ldi	r24, 0x76	; 118
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	6a e0       	ldi	r22, 0x0A	; 10
 258:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
		ustawKursor(1,15);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	6f e0       	ldi	r22, 0x0F	; 15
 260:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
		napisz("*",1);
 264:	81 e8       	ldi	r24, 0x81	; 129
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	61 e0       	ldi	r22, 0x01	; 1
 26a:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
 26e:	08 95       	ret
	break;
	case 2:
		czyscLCD();
 270:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
		ustawKursor(0,0);
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
		napisz("2.1 Timer",9);
 27c:	8c e6       	ldi	r24, 0x6C	; 108
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	69 e0       	ldi	r22, 0x09	; 9
 282:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
		ustawKursor(1,0);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
		napisz("2.2 Stoper",10);
 28e:	86 e7       	ldi	r24, 0x76	; 118
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	6a e0       	ldi	r22, 0x0A	; 10
 294:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
		ustawKursor(0,15);
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	6f e0       	ldi	r22, 0x0F	; 15
 29c:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
		napisz("*",1);
 2a0:	81 e8       	ldi	r24, 0x81	; 129
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
 2aa:	08 95       	ret

000002ac <menu3>:
	default:
		break;
	};
}
void menu3(){
	czyscLCD();
 2ac:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
	ustawKursor(0,0);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
	napisz("Menu1",5);
 2b8:	83 e8       	ldi	r24, 0x83	; 131
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	65 e0       	ldi	r22, 0x05	; 5
 2be:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
}
 2c2:	08 95       	ret

000002c4 <menu>:
				
		};	
	}
}

void menu(){
 2c4:	1f 93       	push	r17
	if (idMenu == 0){
 2c6:	90 91 97 00 	lds	r25, 0x0097
 2ca:	99 23       	and	r25, r25
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <menu+0xc>
 2ce:	53 c0       	rjmp	.+166    	; 0x376 <menu+0xb2>
		menuProgram=0;
 2d0:	10 92 98 00 	sts	0x0098, r1
		menuPom=0;
 2d4:	10 92 99 00 	sts	0x0099, r1
		switch(liniaMenu){
 2d8:	80 91 95 00 	lds	r24, 0x0095
 2dc:	82 30       	cpi	r24, 0x02	; 2
 2de:	d9 f0       	breq	.+54     	; 0x316 <menu+0x52>
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	b9 f1       	breq	.+110    	; 0x352 <menu+0x8e>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	09 f0       	breq	.+2      	; 0x2ea <menu+0x26>
 2e8:	6a c0       	rjmp	.+212    	; 0x3be <menu+0xfa>
		case 1:
			czyscLCD();
 2ea:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
			ustawKursor(0,0);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
			napisz("Menu1",5);
 2f6:	83 e8       	ldi	r24, 0x83	; 131
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
			ustawKursor(1,0);
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
			napisz("Menu2",5);
 308:	89 e8       	ldi	r24, 0x89	; 137
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	65 e0       	ldi	r22, 0x05	; 5
 30e:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
			ustawKursor(0,15);
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	15 c0       	rjmp	.+42     	; 0x340 <menu+0x7c>
			napisz("*",1);
			break;
		case 2:
			czyscLCD();
 316:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
			ustawKursor(0,0);
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
			napisz("Menu1",5);
 322:	83 e8       	ldi	r24, 0x83	; 131
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	65 e0       	ldi	r22, 0x05	; 5
 328:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
			ustawKursor(1,0);
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
			napisz("Menu2",5);
 334:	89 e8       	ldi	r24, 0x89	; 137
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	65 e0       	ldi	r22, 0x05	; 5
 33a:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
			ustawKursor(1,15);
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	6f e0       	ldi	r22, 0x0F	; 15
 342:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
			napisz("*",1);
 346:	81 e8       	ldi	r24, 0x81	; 129
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
 350:	36 c0       	rjmp	.+108    	; 0x3be <menu+0xfa>
			break;
		case 3:
			czyscLCD();
 352:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
			ustawKursor(0,0);
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
			napisz("Menu2",5);
 35e:	89 e8       	ldi	r24, 0x89	; 137
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	65 e0       	ldi	r22, 0x05	; 5
 364:	0e 94 cc 00 	call	0x198	; 0x198 <napisz>
			ustawKursor(1,0);
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	0e 94 a7 00 	call	0x14e	; 0x14e <ustawKursor>
			napisz("Menu3",5);
 370:	8f e8       	ldi	r24, 0x8F	; 143
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	e1 cf       	rjmp	.-62     	; 0x338 <menu+0x74>
			napisz("*",1);
			break;
		default:
			break;
		}; 
	} else if(idMenu==1 && liniaMenu==1 && menuProgram==0){
 376:	91 30       	cpi	r25, 0x01	; 1
 378:	11 f5       	brne	.+68     	; 0x3be <menu+0xfa>
 37a:	10 91 95 00 	lds	r17, 0x0095
 37e:	11 30       	cpi	r17, 0x01	; 1
 380:	49 f4       	brne	.+18     	; 0x394 <menu+0xd0>
 382:	80 91 98 00 	lds	r24, 0x0098
 386:	88 23       	and	r24, r24
 388:	d1 f4       	brne	.+52     	; 0x3be <menu+0xfa>
		menu1();
 38a:	0e 94 07 01 	call	0x20e	; 0x20e <menu1>
		menuPom=1;
 38e:	10 93 99 00 	sts	0x0099, r17
 392:	15 c0       	rjmp	.+42     	; 0x3be <menu+0xfa>
	} else if(idMenu==1 && liniaMenu==2 && menuProgram==0){
 394:	12 30       	cpi	r17, 0x02	; 2
 396:	49 f4       	brne	.+18     	; 0x3aa <menu+0xe6>
 398:	80 91 98 00 	lds	r24, 0x0098
 39c:	88 23       	and	r24, r24
 39e:	79 f4       	brne	.+30     	; 0x3be <menu+0xfa>
		menuProgram=1;
 3a0:	90 93 98 00 	sts	0x0098, r25
		liniaMenu==1;
		menu2();
 3a4:	0e 94 13 01 	call	0x226	; 0x226 <menu2>
 3a8:	0a c0       	rjmp	.+20     	; 0x3be <menu+0xfa>
	} else if(idMenu==1 && liniaMenu==3 && menuProgram==0){
 3aa:	13 30       	cpi	r17, 0x03	; 3
 3ac:	41 f4       	brne	.+16     	; 0x3be <menu+0xfa>
 3ae:	80 91 98 00 	lds	r24, 0x0098
 3b2:	88 23       	and	r24, r24
 3b4:	21 f4       	brne	.+8      	; 0x3be <menu+0xfa>
		menuPom=1;
 3b6:	90 93 99 00 	sts	0x0099, r25
		menu3();
 3ba:	0e 94 56 01 	call	0x2ac	; 0x2ac <menu3>
	} 
		
}
 3be:	1f 91       	pop	r17
 3c0:	08 95       	ret

000003c2 <klawiatura>:
 
ISR(TIMER0_COMP_vect) { // przerwanie timer0
	klawiatura();   
}

void klawiatura(){
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	1f 93       	push	r17
 3ca:	cf 93       	push	r28
 3cc:	df 93       	push	r29
 3ce:	c4 e0       	ldi	r28, 0x04	; 4
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i,wyjscie = 0x00;
	for (i=4 ; i<8 ; i++){
	    PORTA = ~_BV(i); // u¿ycie makra
 3d2:	01 e0       	ldi	r16, 0x01	; 1
 3d4:	10 e0       	ldi	r17, 0x00	; 0
		   case 0b00001011: // clear(escape) 
		   		if (i==7) {
					if(idMenu!=0){
			   			idMenu--;
					} else if(menuProgram==1){
						liniaMenu=2;
 3d6:	42 e0       	ldi	r20, 0x02	; 2
 3d8:	f4 2e       	mov	r15, r20
		   case 0b00001110: // up
		   		if (i==7) {
					if(liniaMenu!=1 && menuProgram!=1)
		            	liniaMenu--;
					if(liniaMenu!=1 && menuPom==1)
						liniaMenu=3;
 3da:	33 e0       	ldi	r19, 0x03	; 3
 3dc:	e3 2e       	mov	r14, r19
}

void klawiatura(){
	uint8_t i,wyjscie = 0x00;
	for (i=4 ; i<8 ; i++){
	    PORTA = ~_BV(i); // u¿ycie makra
 3de:	c8 01       	movw	r24, r16
 3e0:	0c 2e       	mov	r0, r28
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <klawiatura+0x26>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	0a 94       	dec	r0
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <klawiatura+0x22>
 3ec:	80 95       	com	r24
 3ee:	8b bb       	out	0x1b, r24	; 27
	    stan = PINA & 0x0F; // odczytanie stanu PINA i maskowanie
 3f0:	89 b3       	in	r24, 0x19	; 25
 3f2:	8f 70       	andi	r24, 0x0F	; 15
 3f4:	80 93 96 00 	sts	0x0096, r24
		switch(stan) { // dopasowanie stanu PINA do dzia³ania programu
 3f8:	80 91 96 00 	lds	r24, 0x0096
 3fc:	8b 30       	cpi	r24, 0x0B	; 11
 3fe:	09 f4       	brne	.+2      	; 0x402 <klawiatura+0x40>
 400:	56 c0       	rjmp	.+172    	; 0x4ae <klawiatura+0xec>
 402:	8c 30       	cpi	r24, 0x0C	; 12
 404:	20 f4       	brcc	.+8      	; 0x40e <klawiatura+0x4c>
 406:	87 30       	cpi	r24, 0x07	; 7
 408:	09 f0       	breq	.+2      	; 0x40c <klawiatura+0x4a>
 40a:	87 c0       	rjmp	.+270    	; 0x51a <klawiatura+0x158>
 40c:	6d c0       	rjmp	.+218    	; 0x4e8 <klawiatura+0x126>
 40e:	8d 30       	cpi	r24, 0x0D	; 13
 410:	49 f1       	breq	.+82     	; 0x464 <klawiatura+0xa2>
 412:	8e 30       	cpi	r24, 0x0E	; 14
 414:	09 f0       	breq	.+2      	; 0x418 <klawiatura+0x56>
 416:	81 c0       	rjmp	.+258    	; 0x51a <klawiatura+0x158>
		   case 0b00001111: 
		        break;
		   case 0b00001110: // up
		   		if (i==7) {
 418:	c7 30       	cpi	r28, 0x07	; 7
 41a:	09 f0       	breq	.+2      	; 0x41e <klawiatura+0x5c>
 41c:	7e c0       	rjmp	.+252    	; 0x51a <klawiatura+0x158>
					if(liniaMenu!=1 && menuProgram!=1)
 41e:	90 91 95 00 	lds	r25, 0x0095
 422:	91 30       	cpi	r25, 0x01	; 1
 424:	39 f0       	breq	.+14     	; 0x434 <klawiatura+0x72>
 426:	80 91 98 00 	lds	r24, 0x0098
 42a:	81 30       	cpi	r24, 0x01	; 1
 42c:	19 f0       	breq	.+6      	; 0x434 <klawiatura+0x72>
		            	liniaMenu--;
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	90 93 95 00 	sts	0x0095, r25
					if(liniaMenu!=1 && menuPom==1)
 434:	80 91 95 00 	lds	r24, 0x0095
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	31 f0       	breq	.+12     	; 0x448 <klawiatura+0x86>
 43c:	80 91 99 00 	lds	r24, 0x0099
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	11 f4       	brne	.+4      	; 0x448 <klawiatura+0x86>
						liniaMenu=3;
 444:	e0 92 95 00 	sts	0x0095, r14
					if(liniaMenu!=1 && menuProgram==1){
 448:	80 91 95 00 	lds	r24, 0x0095
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	c1 f0       	breq	.+48     	; 0x480 <klawiatura+0xbe>
 450:	80 91 98 00 	lds	r24, 0x0098
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	a1 f4       	brne	.+40     	; 0x480 <klawiatura+0xbe>
						menu2();
 458:	0e 94 13 01 	call	0x226	; 0x226 <menu2>
						liniaMenu--;
 45c:	80 91 95 00 	lds	r24, 0x0095
 460:	81 50       	subi	r24, 0x01	; 1
 462:	22 c0       	rjmp	.+68     	; 0x4a8 <klawiatura+0xe6>
					} else
						menu();
				} 
		        break;
		   case 0b00001101: // down
		   		if (i==7) {
 464:	c7 30       	cpi	r28, 0x07	; 7
 466:	09 f0       	breq	.+2      	; 0x46a <klawiatura+0xa8>
 468:	58 c0       	rjmp	.+176    	; 0x51a <klawiatura+0x158>
					if(liniaMenu!=3 && idMenu==0){
 46a:	90 91 95 00 	lds	r25, 0x0095
 46e:	93 30       	cpi	r25, 0x03	; 3
 470:	51 f0       	breq	.+20     	; 0x486 <klawiatura+0xc4>
 472:	80 91 97 00 	lds	r24, 0x0097
 476:	88 23       	and	r24, r24
 478:	31 f4       	brne	.+12     	; 0x486 <klawiatura+0xc4>
		            	liniaMenu++;
 47a:	9f 5f       	subi	r25, 0xFF	; 255
 47c:	90 93 95 00 	sts	0x0095, r25
						menu();
 480:	0e 94 62 01 	call	0x2c4	; 0x2c4 <menu>
 484:	4a c0       	rjmp	.+148    	; 0x51a <klawiatura+0x158>
					} else if(idMenu==1 && menuProgram==1 && liniaMenu!=2){
 486:	80 91 97 00 	lds	r24, 0x0097
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	09 f0       	breq	.+2      	; 0x490 <klawiatura+0xce>
 48e:	45 c0       	rjmp	.+138    	; 0x51a <klawiatura+0x158>
 490:	80 91 98 00 	lds	r24, 0x0098
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	09 f0       	breq	.+2      	; 0x49a <klawiatura+0xd8>
 498:	40 c0       	rjmp	.+128    	; 0x51a <klawiatura+0x158>
 49a:	92 30       	cpi	r25, 0x02	; 2
 49c:	f1 f1       	breq	.+124    	; 0x51a <klawiatura+0x158>
						menu2();
 49e:	0e 94 13 01 	call	0x226	; 0x226 <menu2>
						liniaMenu++;
 4a2:	80 91 95 00 	lds	r24, 0x0095
 4a6:	8f 5f       	subi	r24, 0xFF	; 255
 4a8:	80 93 95 00 	sts	0x0095, r24
 4ac:	36 c0       	rjmp	.+108    	; 0x51a <klawiatura+0x158>
					}
				}
		        break;
		   case 0b00001011: // clear(escape) 
		   		if (i==7) {
 4ae:	c7 30       	cpi	r28, 0x07	; 7
 4b0:	a1 f5       	brne	.+104    	; 0x51a <klawiatura+0x158>
					if(idMenu!=0){
 4b2:	80 91 97 00 	lds	r24, 0x0097
 4b6:	88 23       	and	r24, r24
 4b8:	21 f0       	breq	.+8      	; 0x4c2 <klawiatura+0x100>
			   			idMenu--;
 4ba:	81 50       	subi	r24, 0x01	; 1
 4bc:	80 93 97 00 	sts	0x0097, r24
 4c0:	2c c0       	rjmp	.+88     	; 0x51a <klawiatura+0x158>
					} else if(menuProgram==1){
 4c2:	80 91 98 00 	lds	r24, 0x0098
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	29 f4       	brne	.+10     	; 0x4d4 <klawiatura+0x112>
						liniaMenu=2;
 4ca:	f0 92 95 00 	sts	0x0095, r15
						menuProgram=0;
 4ce:	10 92 98 00 	sts	0x0098, r1
 4d2:	23 c0       	rjmp	.+70     	; 0x51a <klawiatura+0x158>
					} else if(menuPom==1){
 4d4:	80 91 99 00 	lds	r24, 0x0099
 4d8:	81 30       	cpi	r24, 0x01	; 1
 4da:	19 f4       	brne	.+6      	; 0x4e2 <klawiatura+0x120>
						menuPom=0;
 4dc:	10 92 99 00 	sts	0x0099, r1
 4e0:	1c c0       	rjmp	.+56     	; 0x51a <klawiatura+0x158>
					} else if(menuPom==0)
 4e2:	88 23       	and	r24, r24
 4e4:	d1 f4       	brne	.+52     	; 0x51a <klawiatura+0x158>
 4e6:	cc cf       	rjmp	.-104    	; 0x480 <klawiatura+0xbe>
						menu();
				} 
		        break;
		   case 0b00000111: // enter
		   		if (i==7) {
 4e8:	c7 30       	cpi	r28, 0x07	; 7
 4ea:	b9 f4       	brne	.+46     	; 0x51a <klawiatura+0x158>
					if (idMenu!=2)
 4ec:	80 91 97 00 	lds	r24, 0x0097
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	19 f0       	breq	.+6      	; 0x4fa <klawiatura+0x138>
			   			idMenu++;
 4f4:	8f 5f       	subi	r24, 0xFF	; 255
 4f6:	80 93 97 00 	sts	0x0097, r24
					menu();	
 4fa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <menu>
					if(menuPom==1 && idMenu==2 && liniaMenu==3)
 4fe:	80 91 99 00 	lds	r24, 0x0099
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	51 f4       	brne	.+20     	; 0x51a <klawiatura+0x158>
 506:	80 91 97 00 	lds	r24, 0x0097
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	31 f4       	brne	.+12     	; 0x51a <klawiatura+0x158>
 50e:	80 91 95 00 	lds	r24, 0x0095
 512:	83 30       	cpi	r24, 0x03	; 3
 514:	11 f4       	brne	.+4      	; 0x51a <klawiatura+0x158>
						menu1();
 516:	0e 94 07 01 	call	0x20e	; 0x20e <menu1>
 51a:	21 96       	adiw	r28, 0x01	; 1
	klawiatura();   
}

void klawiatura(){
	uint8_t i,wyjscie = 0x00;
	for (i=4 ; i<8 ; i++){
 51c:	c8 30       	cpi	r28, 0x08	; 8
 51e:	d1 05       	cpc	r29, r1
 520:	09 f0       	breq	.+2      	; 0x524 <klawiatura+0x162>
 522:	5d cf       	rjmp	.-326    	; 0x3de <klawiatura+0x1c>
		   default:
		        break;
				
		};	
	}
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	1f 91       	pop	r17
 52a:	0f 91       	pop	r16
 52c:	ff 90       	pop	r15
 52e:	ef 90       	pop	r14
 530:	08 95       	ret

00000532 <__vector_10>:
		wypisz(0x14,LCD_COMMAND);
	while(y++ <= 16)
		wypisz(' ',LCD_DATA);
}
 
ISR(TIMER0_COMP_vect) { // przerwanie timer0
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	3f 93       	push	r19
 540:	4f 93       	push	r20
 542:	5f 93       	push	r21
 544:	6f 93       	push	r22
 546:	7f 93       	push	r23
 548:	8f 93       	push	r24
 54a:	9f 93       	push	r25
 54c:	af 93       	push	r26
 54e:	bf 93       	push	r27
 550:	ef 93       	push	r30
 552:	ff 93       	push	r31
	klawiatura();   
 554:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <klawiatura>
}
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <main>:
	ustawKursor(0,0);
	napisz("Menu1",5);
}
int main(void)
{
	DDRA = 0xF0; // ustawienie czêci portu A w stan wejcia
 57a:	80 ef       	ldi	r24, 0xF0	; 240
 57c:	8a bb       	out	0x1a, r24	; 26
    PORTA = 0x0F; // podci¹gniêcie portu A
 57e:	8f e0       	ldi	r24, 0x0F	; 15
 580:	8b bb       	out	0x1b, r24	; 27
    DDRC = 0x0F; // ustawienie 5 bitów portu C w stan wyjcia
 582:	84 bb       	out	0x14, r24	; 20
    PORTC = 0x00; // stan pocz¹tkowy portu C
 584:	15 ba       	out	0x15, r1	; 21
    TCCR0 |= 1 << WGM01 | 1 << CS00 | 1 << CS02; // tryb CTC i preskaler 1024
 586:	83 b7       	in	r24, 0x33	; 51
 588:	8d 60       	ori	r24, 0x0D	; 13
 58a:	83 bf       	out	0x33, r24	; 51
    TIMSK |= 1 << OCIE0; // flaga przepe³nienia
 58c:	89 b7       	in	r24, 0x39	; 57
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	89 bf       	out	0x39, r24	; 57
    OCR0 = 10; // czas 5ms 
 592:	8a e0       	ldi	r24, 0x0A	; 10
 594:	8c bf       	out	0x3c, r24	; 60
    TCNT0 = 0; // wartoæ startowa timera
 596:	12 be       	out	0x32, r1	; 50
    sei();
 598:	78 94       	sei
	inicjalizacjaLCD();
 59a:	0e 94 77 00 	call	0xee	; 0xee <inicjalizacjaLCD>
	czyscLCD();
 59e:	0e 94 65 00 	call	0xca	; 0xca <czyscLCD>
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <main+0x28>

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
